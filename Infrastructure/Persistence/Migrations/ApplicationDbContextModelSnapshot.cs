// <auto-generated />
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.EAVAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EAVEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EAVEntityId");

                    b.ToTable("EAVAttributes");
                });

            modelBuilder.Entity("Domain.EAVEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EAVEntities");
                });

            modelBuilder.Entity("Domain.EAVValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EAVAttributeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EAVAttributeId");

                    b.ToTable("EAVValues");
                });

            modelBuilder.Entity("Domain.EAVAttribute", b =>
                {
                    b.HasOne("Domain.EAVEntity", "EAVEntity")
                        .WithMany("EAVAttributes")
                        .HasForeignKey("EAVEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EAVEntity");
                });

            modelBuilder.Entity("Domain.EAVValue", b =>
                {
                    b.HasOne("Domain.EAVAttribute", "EAVAttribute")
                        .WithMany("EAVValues")
                        .HasForeignKey("EAVAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EAVAttribute");
                });

            modelBuilder.Entity("Domain.EAVAttribute", b =>
                {
                    b.Navigation("EAVValues");
                });

            modelBuilder.Entity("Domain.EAVEntity", b =>
                {
                    b.Navigation("EAVAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}
